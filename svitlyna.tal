|00 @System [ 
	&vector $2 &expansion $2 &wst $1 &rst $1 
	&metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1 
]
|10 @Console [ 
	&vector $2 &read $1 &pad $4 
	&type $1 &write $1 &error $1600
]
|20 @Screen [ 
	&vector $2 &width $2 &height $2 &auto $1 &pad 
	$1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1600
]

|a0 @File [ 
	&vector $2 &success $2 &stat $2 &delete $1 
	&append $1 &name $2 &length $2 &read $2 &write $2000
]

|0000 
@img-w $2 @img-h $2 @view-x $2 @view-y $2

( boolean options, could be compressed to bit fields if needed )
( dithering requires use of large memory buffers for lines )
@no-dithering $1
@no-fullscreen $1

( see bottom of file for calculations )
%mMAX_W_SMOL { #0300 }
%mMAX_W_BIG { #3c00 }

@color0 [ &r $1 &g $1 &b $1 ]
@color1 [ &r $1 &g $1 &b $1 ]
@color2 [ &r $1 &g $1 &b $1 ]
@color3 [ &r $1 &g $1 &b $1 ]

|0100
	( hardcoded colors for now )
	#ffff .color0 STZ2 #ff .color0/b STZ
	#bbbb .color1 STZ2 #bb .color1/b STZ
	#6666 .color2 STZ2 #66 .color2/b STZ
	#0000 .color3 STZ2 #00 .color3/b STZ
	prepare-palette

	;filename .File/name DEO2
	#000e .File/length DEO2 ;buffer .File/read DEO2
	.File/success DEI2 #000e EQU2 ?{ !bad-file }

	;buffer/magic LDA DUP LIT "f EQU ?{ !bad-file }

	#0000
@ff-header
	INC2 DUP2 DUP2
	;&magic ADD2 LDA DUP ?{ !ff-size }
	ROT ROT ;buffer ADD2 LDA EQU ?{ !bad-file }
	!ff-header
	&magic "farbfeld 00
@ff-size
	;buffer/ffwidthhigh LDA2 #0000 EQU2 ?{ !too-large }
	;buffer/ffwidthlow LDA2 DUP2 .img-w STZ2
	;buffer/ffheighthigh LDA2 #0000 EQU2 ?{ !too-large }
	#0002 .File/length DEO2 ;buffer/ffheightlow .File/read DEO2
	;buffer/ffheightlow LDA2 DUP2 .img-h STZ2

	handle-image-size
	
	#01 .Screen/auto DEO
	#0008 .File/length DEO2

	;ff-file-print-bunch .Screen/vector DEO2
BRK


@ff-file-print-bunch
	&loop
		ff-file-print
	!&loop
!fail

	
( farbfeld uses 16-bit depth, not alpha-premultiplied ) 
( we discard the lower 12 bits )
( 4 bit color multiplied with 4 bit alpha to get 8 bits )
@ff-buffer [ &r $2 &g $2 &b $2 &a $2 ]
@ff-file-print
	;ff-buffer .File/read DEO2
	,ff-buffer/a LDR INC ?{
		,ff-buffer/r LDR #04 SFT 
		,ff-buffer/a LDR #04 SFT MUL ;color/r STA
		,ff-buffer/g LDR #04 SFT 
		,ff-buffer/a LDR #04 SFT MUL ;color/g STA
		,ff-buffer/b LDR #04 SFT 
		,ff-buffer/a LDR #04 SFT MUL ;color/b STA
		print-pixel
		JMP2r 
	}
	,ff-buffer/r LDR ;color/r STA
	,ff-buffer/g LDR ;color/g STA
	,ff-buffer/b LDR ;color/b STA
	print-pixel
JMP2r


@handle-image-size ( w* h* -- w* h* )
	DUP2 .Screen/height DEO2
	DUP2 .Screen/height DEI2 EQU2 ?{
		#01 .no-fullscreen STZ
		!&fullscreen-check-end
	}
	OVR2 .Screen/width DEO2
	DUP2 .Screen/width DEI2 EQU2 ?{
		#01 .no-fullscreen STZ
	}
&fullscreen-check-end
	OVR2
	.no-fullscreen LDZ SUB ?{ !too-large }

	mMAX_W_SMOL LTH2 ?{ 
		( memory check )
		LIT "! #ffff STA
		#ffff LDA LIT "! EQU ?{
			#01 .no-dithering STZ 
		}
		LIT "? #ffff STA
		#ffff LDA LIT "? EQU ?{
			#01 .no-dithering STZ 
		}
	}

	mMAX_W_SMOL LTH2 ?{ 
		( memory check )
		LIT "! #ffff STA
		#ffff LDA LIT "! EQU ?{
			#01 .no-dithering STZ 
		}
		LIT "? #ffff STA
		#ffff LDA LIT "? EQU ?{
			#01 .no-dithering STZ 
		}
	}
JMP2r


( assumes screen auto x, RGB written to ;color )
@print-pixel
	pick-color 
	.Screen/pixel DEO
	.Screen/x DEI2 
	.img-w LDZ2
	NEQ2 ?{ 
		#0000 .Screen/x DEO2 
		.Screen/y DEI2 INC2 DUP2 
		.img-h LDZ2 NEQ2 ?{ !end } .Screen/y DEO2
	}
JMP2r


( probably overkill )
@prepare-palette
	;color0/r LDA DUP ;color0r STA #f0 AND 
	;color1/r LDA DUP ;color1r STA #04 SFT ORA ,&rhigh STR
	;color2/r LDA DUP ;color2r STA #f0 AND 
	;color3/r LDA DUP ;color3r STA #04 SFT ORA ,&rlow STR
	;color0/g LDA DUP ;color0g STA #f0 AND 
	;color1/g LDA DUP ;color1g STA #04 SFT ORA ,&ghigh STR
	;color2/g LDA DUP ;color2g STA #f0 AND 
	;color3/g LDA DUP ;color3g STA #04 SFT ORA ,&glow STR
	!{
		&r &rhigh 00 &rlow 00
		&g &ghigh 00 &glow 00
		&b &bhigh 00 &blow 00
	}
	;color0/b LDA DUP ;color0b STA #f0 AND 
	;color1/b LDA DUP ;color1b STA #04 SFT ORA ,&bhigh STR
	;color2/b LDA DUP ;color2b STA #f0 AND 
	;color3/b LDA DUP ;color3b STA #04 SFT ORA ,&blow STR

	,&r LDR2 .System/r DEO2
	,&g LDR2 .System/g DEO2
	,&b LDR2 .System/b DEO2
JMP2r


( chooses closest color from palette )
@pick-color
	#00 [ ,color/r LDR ] [ LIT @color0r $1 ] GTHk ?{ SWP } SUB
	#00 [ ,color/g LDR ] [ LIT @color0g $1 ] GTHk ?{ SWP } SUB ADD2
	#00 [ ,color/b LDR ] [ LIT @color0b $1 ] GTHk ?{ SWP } SUB ADD2
	,color/mindist STR2 #00 ,color/mindistcol STR
	
	#0000
	#00 [ ,color/r LDR ] [ LIT @color1r $1 ] GTHk ?{ SWP } SUB
	#00 [ ,color/g LDR ] [ LIT @color1g $1 ] GTHk ?{ SWP } SUB ADD2
	#00 [ ,color/b LDR ] [ LIT @color1b $1 ] GTHk ?{ SWP } SUB ADD2
	DUP2 ,color/mindist LDR2 GTH2 
	?{ DUP2 ,color/mindist STR2 #01 ,color/mindistcol STR } POP2
	
	!{
		@color [ 
			&r 00 &g 00 &b 00 &mindist ffff &mindistcol 00 
		]
		@pick-color2
	}
	#0000
	#00 [ ,color/r LDR ] [ LIT @color2r $1 ] GTHk ?{ SWP } SUB
	#00 [ ,color/g LDR ] [ LIT @color2g $1 ] GTHk ?{ SWP } SUB ADD2
	#00 [ ,color/b LDR ] [ LIT @color2b $1 ] GTHk ?{ SWP } SUB ADD2
	DUP2 ,color/mindist LDR2 GTH2 
	?{ DUP2 ,color/mindist STR2 #02 ,color/mindistcol STR } POP2
	
	#0000
	#00 [ ,color/r LDR ] [ LIT @color3r $1 ] GTHk ?{ SWP } SUB
	#00 [ ,color/g LDR ] [ LIT @color3g $1 ] GTHk ?{ SWP } SUB ADD2
	#00 [ ,color/b LDR ] [ LIT @color3b $1 ] GTHk ?{ SWP } SUB ADD2
	DUP2 ,color/mindist LDR2 GTH2 
	?{ DUP2 ,color/mindist STR2 #03 ,color/mindistcol STR } POP2

	;color/mindistcol LDA
JMP2r
	

@print-str ( str* -- )
	&while ( -- )
		LDAk .Console/write DEO
		INC2 LDAk 
	?&while
	POP2 
JMP2r
	

@bad-file 
	;&str 
!fail
	&str "...Bad 20 "file 00


@too-large
	;&str 
!fail
	&str "...Too 20 "large 00


@fail ( error-msg* -- )
	print-str
	#01 .System/state DEO
BRK
	

@end
	;&str print-str #0000 .Screen/vector DEO2 
BRK
	&str "Готово! 00


@start-str "Hi 20 "there! 00

@print-byte ( b -- )
	DUP #04 SFT DUP #09 GTH #27 MUL 
	ADD [ LIT "0 ] ADD .Console/write DEO

	#0f AND DUP #09 GTH #27 MUL 
	ADD [ LIT "0 ] ADD .Console/write DEO
JMP2r


@filename "image.ff 00
@buffer [
	&magic                       $4
	              &qoiwidthhigh  $2
	              &qoiwidthlow   $2
	&ffwidthhigh  &qoiheighthigh $2
	&ffwidthlow   &qoiheightlow  $2
	&ffheighthigh &qoichan       $1
	              &qoispace      $1
	&ffheightlow                 $2 
]

( smol lines: #0800-#2000, 0x0400 = 1024  bytes per line, 
              1024  * 3 / 4 = 768   pixels )
( big lines:  #1000-#ffff, 0x5000 = 20480 bytes per line, 
              20480 * 3 / 4 = 15360 pixels )
|0800 @line-1-smol
|1000              @line-1-big
|1200 @line-2-smol
|1600 @line-3-smol
|6000              @line-2-big
|b000              @line-3-big
