|00 @System [ 
	&vector $2 &expansion $2 &wst $1 &rst $1 
	&metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1 
]
|10 @Console [ 
	&vector $2 &read $1 &pad $4 
	&type $1 &write $1 &error $1
]
|20 @Screen [ 
	&vector $2 &width $2 &height $2 &auto $1 &pad 
	$1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1600
]
|a0 @File [ 
	&vector $2 &success $2 &stat $2 &delete $1 
	&append $1 &name $2 &length $2 &read $2 &write $2
]

|0000 
@x $2 @y $2
@img-w $2 @img-h $2

( see bottom of file for reasoning )
%Mmax-w-smol { #0200 }
%Mmax-w-big { #1000 }

%Mmax-name-length { #00ff }

@color0 [ &r $1 &g $1 &b $1 ]
@color1 [ &r $1 &g $1 &b $1 ]
@color2 [ &r $1 &g $1 &b $1 ]
@color3 [ &r $1 &g $1 &b $1 ]

(       Farbfeld                 )
(	ff-magic-2 ff-pixel      )
@buf [
	&ff-w-high &ff-r     $2
	&ff-w-low  &ff-g     $2     
	&ff-h-high &ff-b     $2
	&ff-h-low  &ff-a     $10
]
@buf-size-expect $1 @buf-on-read $2
%Mbuf-next { .buf-on-read STZ2 .buf-size-expect STZ }

%Mprint-short { SWP print-byte print-byte }
%Mcout { .Console/write DEO }
%Mendl { #0a .Console/write DEO }
%Mprint-bgr { 
	LIT "# Mcout 
	print-byte print-byte print-byte Mendl 
}
%Mprint-rgb { 
	LIT "# Mcout 
	STH OVR print-byte 
	DUP print-byte
	STHr DUP print-byte Mendl
}
%Mdump-buffer {
	#00
	&dump-buffer-loop 
		DUP print-byte #20 Mcout
		DUP .buf ADD LDZ DUP print-byte 
		LIT "| Mcout Mcout Mendl
		INC DUP #08 NEQ 
	?&dump-buffer-loop
	POP
}

%Msk+ { STH2kr ADD2 }
%Ms+ { STH2r ADD2 }


|0100
( init )
	;str/init print-str

	( hardcoded colors for now )
	#0f0f .color0 STZ2 #0f .color0/b STZ
	#0f00 .color1 STZ2 #00 .color1/b STZ
	#000f .color2 STZ2 #00 .color2/b STZ
	#0000 .color3 STZ2 #0f .color3/b STZ
	( #0f0f .color0 STZ2 #0f .color0/b STZ )
	( #0a0a .color1 STZ2 #0a .color1/b STZ )
	( #0505 .color2 STZ2 #05 .color2/b STZ )
	( #0000 .color3 STZ2 #00 .color3/b STZ )
	prepare-palette


	#01 .Screen/auto DEO

	#08 ;detect-magic Mbuf-next

	.Console/type DEI ?{ 
		;str/start print-str ;str/start-stdin print-str
		;on-stdin .Console/vector DEO2 
	BRK 
	}

	;read-argument .Console/vector DEO2
BRK




( i/o )


@on-stdin ( -> )
	LIT [ &index 00 ] 
	DUP .buf ADD .Console/read DEI SWP STZ
	INC DUP .buf-size-expect LDZ NEQ ?{
		( Mdump-buffer )
		( call subroutine )
		.buf-on-read LDZ2 JSR2
		.buf-on-read LDZ2 ;after-end NEQ2 ?{ 
			#0000 .Console/vector DEO2
		}
		POP #00
	}
	[ ,&index STR ]
BRK


@read-argument ( -> )
	.Console/type DEI 
	DUP #03 NEQ ?{
		;str/usage !fail-str
	}
	#02 EQU ?{ 
		#0000 .Console/vector DEO2
		;on-read-argument .Screen/vector DEO2
		BRK
	}
	.Console/read DEI 
	[ ,&name-length LDR2 ] ;filename ADD2 STA
	[ ,&name-length LDR2 ] INC2 
	DUP2 Mmax-name-length LTH2 ?{
		;str/filename-big !fail-str
	}

	[ ,&name-length STR2 ]
BRK 
	&name-length 0000


@on-read-argument ( -> )
	#0000 .Screen/vector DEO2
	;str/start print-str
	;str/start-file print-str
	;filename print-str
	Mendl
	

	;filename .File/name DEO2

	( print loop )
	&loop
		#00 .buf-size-expect LDZ .File/length DEO2
		( ;buf Mprint-short #00 .buf Mprint-short Mendl )
		;buf .File/read DEO2

		( shouldn't read more than 255 bytes )
		.File/success DEI2 #00 .buf-size-expect LDZ 
		EQU2 ?{ !bad-file }


		( call subroutine )
		.buf-on-read LDZ2 JSR2

		.buf-on-read LDZ2 ;after-end NEQ2
	?&loop
BRK




( image format )


@detect-magic ( -- )
	LIT "m Mcout Mendl
	#0000
	&loop
		DUP2
		;&magic ADD2 LDA #00 EQU ?&loop-end
		DUP2 ;&magic ADD2 LDA 
		OVR .buf ADD LDZ
		DUP .Console/write DEO 
		EQU ?{ !bad-file }
		INC2 
	!&loop
	[ &magic "farbfeld 00 ]
	&loop-end

	Mendl 
	#08 ;ff-size Mbuf-next
	POP2 
JMP2r


@ff-size ( -- )
	.buf/ff-w-high LDZ2 #0000 EQU2 ?{ !too-large }
	.buf/ff-w-low LDZ2 
	.buf/ff-h-high LDZ2 #0000 EQU2 ?{ !too-large }
	.buf/ff-h-low LDZ2

	handle-image-size

	#08 ;ff-palette-split0-init Mbuf-next
JMP2r

@ff-reset-file ( buf-next* -- )
	( this will skip the header )
	#10 ROT ROT Mbuf-next	
	;str/start print-str
	;str/start-file print-str
	;filename print-str
	;filename .File/name DEO2
	#0000 .x STZ2 #0000 .y STZ2
JMP2r

	
( farbfeld uses 16-bit depth, not alpha-premultiplied ) 
( we discard the lower 10 bits )
( use 4 bits directly, if alpha is not present )
( or, multiply 2 bit color with 2 bit alpha to get 4 bits )
@ff-get-next-color ( -- r g b )
	( 255 INC becomes 0, so lambda isn't skipped -> opaque )
	.buf/ff-a LDZ DUP INC ?{
		POP
		( LIT "# Mcout )
		.buf/ff-r LDZ #04 SFT
		( DUP print-byte )
		.buf/ff-g LDZ #04 SFT
		( DUP print-byte )
		.buf/ff-b LDZ #04 SFT
		( DUP print-byte )
		( LIT "< Mcout )
		( .buf/ff-b LDZ .buf/ff-g LDZ .buf/ff-r LDZ Mprint-bgr )
	JMP2r 
	}
	#06 SFT 
	DUP .buf/ff-r LDZ #06 SFT MUL
	DUP .buf/ff-g LDZ #06 SFT MUL
	DUP .buf/ff-b LDZ #06 SFT MUL
JMP2r




( misc. )


@handle-image-size ( w* h* -- )
	;str/height print-str DUP2 Mprint-short Mendl

	DUP2k .Screen/height DEO2 .img-h STZ2
	.Screen/height DEI2 EQU2 ?{
		( ;str/height print-str .Screen/height DEI2  )
		( Mprint-short Mendl )
		( #01 .no-fullscreen STZ )
	}

	;str/width print-str DUP2 Mprint-short Mendl

	DUP2 Mmax-w-big LTH2 ?{ !too-large }
	DUP2k .Screen/width DEO2 .img-w STZ2
	.Screen/width DEI2 EQU2 ?{
		( ;str/width print-str .Screen/width DEI2  )
		( Mprint-short Mendl )
		( #01 .no-fullscreen STZ )
	}
	( .no-fullscreen LDZ #00 EQU ?{ ;str/cannot-fullscreen !fail-str } )

	( Mmax-w-smol LTH2 ?{ 
		( memory check )
		LIT "! #ffff STA
		#ffff LDA LIT "! EQU ?{
			#01 .no-dithering STZ 
		}
		LIT "? #ffff STA
		#ffff LDA LIT "? EQU ?{
			#01 .no-dithering STZ 
		}
	}

	Mmax-w-big LTH2 ?{ 
		#01 .no-dithering STZ 
	}
	.no-fullscreen LDZ SUB ?{ ;str/cannot-fullscreen !fail-str } )
JMP2r




( image processing )

%Mpart0 { #0000 }
%Mpart1 { #00c6 }
%Mpart2 { #018c }
%Mpart3 { #0192 }
( %Mpart3 { #0258 } )

@part0
[ 
	( partition boundaries: start inclusive, end exclusive )
	&r-start 00 &r-end ff   
	&g-start 00 &g-end ff   
	&b-start 00 &b-end ff   
	( radix-sorted lists of color values )
	&r-sorted $40 &g-sorted $40 &b-sorted $40
]


@part1
	( partition boundaries: start inclusive, end exclusive )
	&r-start 00 &r-end ff
	&g-start 00 &g-end ff
	&b-start 00 &b-end ff
	( radix-sorted lists of color values )
	&r-sorted $40 &g-sorted $40 &b-sorted $40


@part2
	( partition boundaries: start inclusive, end exclusive )
	&r-start 00 &r-end ff
	&g-start 00 &g-end ff
	&b-start 00 &b-end ff
	( radix-sorted lists of color values )
	( &r-sorted $40 &g-sorted $40 &b-sorted $40 )


@part3
	( partition boundaries: start inclusive, end exclusive )
	&r-start 00 &r-end ff
	&g-start 00 &g-end ff
	&b-start 00 &b-end ff



@part-debug ( offset * -- )
	STH2
	Mendl
	LIT "B Mcout LIT "R Mcout ;part0/r-start Msk+ LDA2 Mprint-short
	LIT "B Mcout LIT "G Mcout ;part0/g-start Msk+ LDA2 Mprint-short
	LIT "B Mcout LIT "B Mcout ;part0/b-start Msk+ LDA2 Mprint-short

	#0000 
	Mendl LIT "S Mcout LIT "R Mcout 
	&loopr
		DUP2 ;part0/r-sorted Msk+ ADD2 LDA2 Mprint-short
		INC2 INC2 
		DUP2 ;part0/r-sorted Msk+ ADD2 LDA2 Mprint-short
		INC2 INC2 
		#20 Mcout
		DUP2 #0040 NEQ2
	?&loopr

	POP2 #0000
	Mendl LIT "S Mcout LIT "G Mcout 
	&loopg
		DUP2 ;part0/g-sorted Msk+ ADD2 LDA2 Mprint-short
		INC2 INC2 
		DUP2 ;part0/g-sorted Msk+ ADD2 LDA2 Mprint-short
		INC2 INC2 
		#20 Mcout
		DUP2 #0040 NEQ2
	?&loopg

	POP2 #0000
	Mendl LIT "S Mcout LIT "B Mcout 
	&loopb
		DUP2 ;part0/b-sorted Msk+ ADD2 LDA2 Mprint-short
		INC2 INC2 
		DUP2 ;part0/b-sorted Msk+ ADD2 LDA2 Mprint-short
		INC2 INC2 
		#20 Mcout
		DUP2 #0040 NEQ2
	?&loopb
	POP2
	Mendl POP2r
JMP2r


@part-init ( offset* -- )
	LIT "I Mcout
	STH2
	#0000 
	&loop
		#0000 OVR2 ;part0/r-sorted ADD2 Msk+ STA2
		INC2 INC2 DUP2 #00c0 NEQ2
	?&loop
	POP2 POP2r
JMP2r


( get color variation within partition )
@part-process ( r g b offset* -- )
	STH2
	#20 SFT #00 SWP ;part0/b-sorted Msk+ ADD2 inc-addr-32bit
	#20 SFT #00 SWP ;part0/g-sorted Msk+ ADD2 inc-addr-32bit
	#20 SFT #00 SWP ;part0/r-sorted Ms+ ADD2 inc-addr-32bit
JMP2r 


@part-get-max-var ( offset* -- max-var max-var-chan )
	DUP2 Mprint-short
	STH2
	#00
	&find-r-min
		#00 OVR #20 SFT ;part0/r-sorted ADD2 Msk+
		LDA2k SWP2 INC2 INC2 LDA2 non-zero32 ?&found-r-min
		INC
	!&find-r-min
	&found-r-min

	DUP
	&find-r-max
		#00 OVR #20 SFT ;part0/r-sorted ADD2 Msk+
		LDA2k SWP2 INC2 INC2 LDA2 is-zero32 ?&found-r-max
		INC DUP #10 LTH
	?&find-r-max
	&found-r-max

	SWP SUB
	LIT "V Mcout LIT "R Mcout DUP print-byte

	#00
	&find-g-min
		#00 OVR #20 SFT ;part0/g-sorted ADD2 Msk+
		LDA2k SWP2 INC2 INC2 LDA2 non-zero32 ?&found-g-min
		INC
	!&find-g-min
	&found-g-min

	DUP
	&find-g-max
		#00 OVR #20 SFT ;part0/g-sorted ADD2 Msk+
		LDA2k SWP2 INC2 INC2 LDA2 is-zero32 ?&found-g-max
		INC DUP #10 LTH
	?&find-g-max
	&found-g-max

	SWP SUB
	LIT "V Mcout LIT "G Mcout DUP print-byte

	#00
	&find-b-min
		#00 OVR #20 SFT ;part0/b-sorted ADD2 Msk+
		LDA2k SWP2 INC2 INC2 LDA2 non-zero32 ?&found-b-min
		INC
	!&find-b-min
	&found-b-min

	DUP
	&find-b-max
		#00 OVR #20 SFT ;part0/b-sorted ADD2 Msk+
		LDA2k SWP2 INC2 INC2 LDA2 is-zero32 ?&found-b-max
		INC DUP #10 LTH
	?&find-b-max
	&found-b-max

	SWP SUB
	LIT "V Mcout LIT "B Mcout DUP print-byte

	POP2r

	( wst: rvar gvar bvar )
	#03 STH
	LTHk ?{ POPr #02 STH SWP } NIP
	LTHk ?{ POPr #01 STH SWP } NIP
	STHr
JMP2r


@part-get-median ( buffer* -- )
	Mendl Mendl
	.img-w LDZ2 .img-h LDZ2 mul16 #01 shift32-0 
	[ ,&midl STR2 ] [ ,&midh STR2 ]
	DUP2 #0000 #0000 ROT2
	&loop ( buffer* sumh* suml* ptr* )
		( LIT ". Mcout )
		LDA2k SWP2 INC2 INC2 LDAk2 SWP2 STH2 add32
		OVR2 OVR2
		[ LIT2 &midh 0000 LIT2 &midl 0000 ] lt32 ?{ 
			POP2 POP2 STH2r SWP2 SUB2 #02 SFT2 JMP2r	
		}
		STH2r INC2 INC2
	!&loop
!fail


@ff-palette-split0-init ( -- )
	Mpart0 part-init
	#08 ;ff-palette-split0 Mbuf-next
	ff-palette-split0
JMP2r


@ff-palette-split0 ( -- )
	ff-get-next-color ( r g b )
	Mprint-rgb ff-get-next-color
	( Mprint-rgb ff-get-next-color )

	Mpart0 part-process
	Mpart0 part-debug

	advance-pos ?{
		Mpart0 part-debug
		Mpart0 part-get-max-var
		DUP #01 NEQ ?{
			;part0/r-sorted part-get-median
			DUP ;part0/r-end STA
			;part1/r-start STA
			!&done
		}
		DUP #02 NEQ ?{
			;part0/g-sorted part-get-median
			DUP ;part0/g-end STA
			;part1/g-start STA
			!&done
		}
		;part0/b-sorted part-get-median
		DUP ;part0/b-end STA
		;part1/b-start STA
		&done
		Mpart0 part-debug
		Mpart1 part-debug
		
		;ff-palette-split1-init ff-reset-file
	}
JMP2r


@ff-palette-split1-init ( -- )
	;str/init print-str 
	Mpart0 part-init
	Mpart1 part-init
	#08 ;ff-palette-split1 Mbuf-next
	( exit so we can get palette data after resetting file )
JMP2r


@ff-palette-split1 ( -- )
	ff-get-next-color ( r g b )
	Mprint-rgb ff-get-next-color

	DUP ;part0/b-start LDA SWP GTH ?&part0-fail
	DUP ;part0/b-end LDA LTH ?{ !&part0-fail }

	SWP
	DUP ;part0/g-start LDA SWP GTH ?{ !&g0 } SWP !&part0-fail
	&g0
	DUP ;part0/g-end LDA LTH ?{ SWP !&part0-fail } SWP

	ROT
	DUP ;part0/r-start LDA SWP GTH ?{ !&r0 } ROT ROT !&part0-fail
	&r0
	DUP ;part0/r-end LDA LTH ?{ ROT ROT !&part0-fail } ROT ROT

	Mpart0 part-process !&processed
	&part0-fail
	Mpart1 part-process

	&processed

	advance-pos ?{
		Mpart0 part-debug
		Mpart1 part-debug
		Mpart0 part-get-max-var
		Mpart1 part-get-max-var
		BRK
		DUP #01 NEQ ?{
			;part0/r-sorted part-get-median
			DUP ;part0/r-end STA
			;part1/r-start STA
			!&done
		}
		DUP #02 NEQ ?{
			;part0/g-sorted part-get-median
			DUP ;part0/g-end STA
			;part1/g-start STA
			!&done
		}
		;part0/b-sorted part-get-median
		DUP ;part0/b-end STA
		;part1/b-start STA
		&done
		Mpart0 part-debug
		Mpart1 part-debug
		BRK
	}
JMP2r



( the start of an alternative algorithm
  instead of recursing and only taking 2 steps,
  we make 3 iterations and select the partition with the highest
  variation to split. this is slower but will produce better results )

( @ff-palette-split ( -- ) )
( 	ff-get-next-color ( r g b ) )

( 	;part0/b-start LDA2 ( min max ) )
( 	ROT GTHk ?{ NIP NIP !&skip-part0 } NIP )
( 	INC LTHk ?{ NIP #01 SUB !&skip-part0 } NIP #01 SUB )
( 	LTHk )

( 	&skip-part0 )
( JMP2r )
( 	&part 00 )


( @ff-palette-split-init ( -- ) )
( 	Mpart0 ;ff-palette-split/part STA )
( 	Mpart0 part-init )
( 	#08 ;ff-palette-split Mbuf-next )
( 	ff-palette-split )
( JMP2r )



( printing )


@ff-print ( -- )
	ff-get-next-color
	;color/b STA ;color/g STA ;color/r STA
	pick-color .Screen/pixel DEO
	advance-pos-screen ?{
		;str/end print-str 
		;after-end .buf-on-read STZ2
	}
JMP2r


( probably overkill )
@prepare-palette
	LIT "0 Mcout
	;color0/b LDA ;color0/g LDA ;color0/r LDA Mprint-bgr
	LIT "1 Mcout
	;color1/b LDA ;color1/g LDA ;color1/r LDA Mprint-bgr
	LIT "2 Mcout
	;color2/b LDA ;color2/g LDA ;color2/r LDA Mprint-bgr
	LIT "3 Mcout
	;color3/b LDA ;color3/g LDA ;color3/r LDA Mprint-bgr
	;color0/r LDA DUP ;color0r STA #40 SFT 
	;color1/r LDA DUP ;color1r STA ORA [ ,&rhigh STR ]
	;color2/r LDA DUP ;color2r STA #40 SFT
	;color3/r LDA DUP ;color3r STA ORA [ ,&rlow STR ]
	;color0/g LDA DUP ;color0g STA #40 SFT 
	;color1/g LDA DUP ;color1g STA ORA [ ,&ghigh STR ]
	;color2/g LDA DUP ;color2g STA #40 SFT
	;color3/g LDA DUP ;color3g STA ORA [ ,&glow STR ]
	!{
		&r &rhigh 00 &rlow 00
		&g &ghigh 00 &glow 00
		&b &bhigh 00 &blow 00
	}
	;color0/b LDA DUP ;color0b STA #40 SFT 
	;color1/b LDA DUP ;color1b STA ORA [ ,&bhigh STR ]
	;color2/b LDA DUP ;color2b STA #40 SFT
	;color3/b LDA DUP ;color3b STA ORA [ ,&blow STR ]

	LIT "R Mcout [ ,&r LDR2 ] Mprint-short
	LIT "G Mcout [ ,&g LDR2 ] Mprint-short
	LIT "B Mcout [ ,&b LDR2 ] Mprint-short
	Mendl

	[ ,&r LDR2 ] .System/r DEO2
	[ ,&g LDR2 ] .System/g DEO2
	[ ,&b LDR2 ] .System/b DEO2
JMP2r


( chooses closest color from palette )
@pick-color ( -- c )
	( LIT "0 Mcout )
	( ;color0/r LDA ;color0/g LDA ;color0/b LDA Mprint-bgr )
	( LIT "1 Mcout )
	( ;color1/r LDA ;color1/g LDA ;color1/b LDA Mprint-bgr )
	( LIT "2 Mcout )
	( ;color2/r LDA ;color2/g LDA ;color2/b LDA Mprint-bgr )
	( LIT "3 Mcout )
	( ;color3/r LDA ;color3/g LDA ;color3/b LDA Mprint-bgr )
	( LIT "o Mcout )
	( ,color/b LDR ,color/g LDR ,color/r LDR Mprint-bgr )
	#00
	( wst: min-dist-color min-dist cur-dist.. )
	[ ,color/r LDR ] [ LIT @color0r $1 ] GTHk ?{ SWP } SUB
	[ ,color/g LDR ] [ LIT @color0g $1 ] GTHk ?{ SWP } SUB ADD
	[ ,color/b LDR ] [ LIT @color0b $1 ] GTHk ?{ SWP } SUB ADD
	
	[ ,color/r LDR ] [ LIT @color1r $1 ] GTHk ?{ SWP } SUB
	[ ,color/g LDR ] [ LIT @color1g $1 ] GTHk ?{ SWP } SUB ADD
	[ ,color/b LDR ] [ LIT @color1b $1 ] GTHk ?{ SWP } SUB ADD
	LTHk ?{ NIP NIP #01 SWP !color-2-check } POP
	
	!{ @color [ &r 00 &g 00 &b 00 ] }

	@color-2-check
	[ ,color/r LDR ] [ LIT @color2r $1 ] GTHk ?{ SWP } SUB
	[ ,color/g LDR ] [ LIT @color2g $1 ] GTHk ?{ SWP } SUB ADD
	[ ,color/b LDR ] [ LIT @color2b $1 ] GTHk ?{ SWP } SUB ADD
	LTHk ?{ NIP NIP #02 SWP !color-3-check } POP
	
	@color-3-check
	[ ,color/r LDR ] [ LIT @color3r $1 ] GTHk ?{ SWP } SUB
	[ ,color/g LDR ] [ LIT @color3g $1 ] GTHk ?{ SWP } SUB ADD
	[ ,color/b LDR ] [ LIT @color3b $1 ] GTHk ?{ SWP } SUB ADD
	LTH ?{ POP #03 }

	( LIT "= Mcout DUP print-byte Mendl )
JMP2r


@advance-pos ( -- continue )
	( LIT "x Mcout .x LDZ2 Mprint-short )
	( LIT "y Mcout .y LDZ2 Mprint-short Mendl )
	.x LDZ2 INC2 .img-w LDZ2 NEQ2k ?{
		POP2 POP2 #0000 .x STZ2
		.y LDZ2 INC2
		DUP2 .y STZ2
		.img-h LDZ2 NEQ2
	JMP2r }
	POP2 .x STZ2
	#01
JMP2r


( assumes screen auto )
@advance-pos-screen ( -- continue )
	.Screen/x DEI2 .img-w LDZ2 NEQ2 ?{
		#0000 .Screen/x DEO2 
		.Screen/y DEI2 INC2 
		DUP2 .Screen/y DEO2 
		.img-h LDZ2 NEQ2
	JMP2r }
	#01
JMP2r




( end )


@after-end ( -- )
	;str/after-end print-str	
JMP2r



( errors )
	

@bad-file 
	;&str 
!fail-str
	&str "...Bad 20 "file 00


@too-large
	;&str 
!fail-str
	&str "...Too 20 "large 00


@fail-str ( error-msg* -> )
	print-str
( -> )
@fail ( -> )
	#01 .System/state DEO
BRK

@str [
	&init "Hello! 0a 00
	&start "Reading 20 00
	&start-file "file: 20 00
	&start-stdin "standard 20 "input... 0a 00
	&end "Готово! 0a 00
	&usage "Usage: 20 "svitlyna.rom 20 "image.ff 0a 00
	&cannot-fullscreen "Unable 20 "to 20 "resize 20 "screen. 0a 00
	&width "w: 20 00
	&height "h: 20 00
	&after-end "Warning: 20 
	           "input 20 "after 20 "image 20 "end. 0a 00
	&filename-big "File 20 "name 20 "too 20 "big. 0a 00
	&divided-colors "Divided 20 "colors. 0a 00
]




( utils and stdlib )


@print-str ( str* -- )
	&while ( -- )
		LDAk .Console/write DEO
		INC2 LDAk 
	?&while
	POP2 
JMP2r

@print-byte ( b -- )
	DUP #04 SFT DUP #09 GTH #27 MUL 
	ADD [ LIT "0 ] ADD .Console/write DEO

	#0f AND DUP #09 GTH #27 MUL 
	ADD [ LIT "0 ] ADD .Console/write DEO
JMP2r

@inc-addr-32bit ( addr* -- )
	DUP2 INC2 INC2 LDA2 INC2 ( inc lower short )
	DUP2 #0000 NEQ2 ?{
		POP2 LDA2k INC2 OVR2 STA2 ( inc upper short )
		#0000 SWP2 INC2 INC2 STA2 
		JMP2r 
	}
	SWP2 INC2 INC2 STA2	
JMP2r




( http://plastic-idolatry.com/erik/nxu/math32.tal )

( x == 0 )
@is-zero32 ( x** -> bool^ )
    ORA2 #0000 EQU2 JMP2r

( x != 0 )
@non-zero32 ( x** -> bool^ )
    ORA2 ORA JMP2r

( x + y )
@add32 ( xhi* xlo* yhi* ylo* -> zhi* zlo* )
    ROT2 STH2k ADD2 STH2k ROT2 ROT2 GTH2r #00 STHr ADD2 ADD2 SWP2 JMP2r

( 16-bit multiplication )
@mul16 ( x* y* -> z** )
    ,&y1 STR ,&y0 STR ( save ylo, yhi )
    ,&x1 STR ,&x0 STR ( save xlo, xhi )
    #0000 ,&z1 STR ,&w0 STR ( reset z1 and w0 )

    ( x1 * y1 => z1z2 )
    LIT2 00 [ &x1 $1 ] LIT2 00 [ &y1 $1 ] MUL2 ,&z3 STR ,&z2 STR

    ( x0 * y1 => z0z1 )
    #00 ,&x0 LDR #00 ,&y1 LDR MUL2 ,&z1 LDR2 ADD2 ,&z1 STR2

    ( x1 * y0 => w1w2 )
    #00 ,&x1 LDR #00 ,&y0 LDR MUL2 ,&w2 STR ,&w1 STR

    ( x0 * y0 => w0w1 )
    LIT2 00 [ &x0 $1 ] LIT2 00 [ &y0 $1 ] MUL2 ,&w0 LDR2 ADD2 ,&w0 STR2

    ( add z and a<<8 )
    #00 LIT2 [ &z1 $1 &z2 $1 ] LIT [ &z3 $1 ]
    LIT2 [ &w0 $1 &w1 $1 ] LIT [ &w2 $1 ] #00
    !add32

( shift by 0-7 bits; used by both lshift and rshift )
@shift32-0 ( x** n^ -> x>>n )
    STH DUP2 STHkr SFT2                       ,&z2 STR2
    POP DUP2 STHkr SFT2 ,&z2 LDR ORA ,&z2 STR ,&z1 STR
    POP      STHr  SFT2 ,&z1 LDR ORA ,&z1 STR
    LIT [ &z1 $1 ] LIT2 [ &z2 $2 ] JMP2r

( x < y )
@lt32 ( x** y** -> bool^ )
    ROT2 SWP2 LTH2 ?{ LTH2 JMP2r } GTH2 #00 EQU JMP2r





( 9 lines are needed: at least 8 to export a sprite,
  multiple of 3 to use dithering )
( smol 
	lines:   #1000-#1d80
	         0x0180 = 384 bytes per line
	         384 / 3 * 4 = 512 pixels per line
	sprites: #1d80-#1ddd
	         0x0080 = 128 bytes total
		 128 * 4 = 512 pixels per line )
|1000 @lines-smol    !fail ( upper limit for smol code )
|1d80 @sprite-smol


|1e00 @filename


( big, is 8x smol
	lines:   #8000-#ec00
	         0x0c00 = 3072 bytes per line
	         3072 / 3 * 4 = 4096 pixels per line
	sprites: #ec00-#f000
	         0x0400 = 1024 bytes total
		 1024 * 4 = 4096 pixels per line )
|8000 @lines-big
|ec00 @sprite-big
